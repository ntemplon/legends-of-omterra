apply plugin: "java"

archivesBaseName = 'Omterra'
version = '0.1.0'

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.emergence.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    jvmArgs = ['-Xms128m', '-Xmx1024m']
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    jvmArgs = ['-Xms128m', '-Xmx1024m']
    debug = true
}

task buildWithDeps(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    //from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task tidy(type: Delete) {
    delete "./build/libs/data" 
}

task dist(type: Copy) {
    from(new File("../core/data"))
    into(new File("./build/libs/data"))
}

task buildAtlas(dependsOn: classes, type: JavaExec) {
    main = "com.omterra.tools.AtlasPacker"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    jvmArgs = ['-Xms128m', '-Xmx512m']
    ignoreExitValue = true
}

buildWithDeps.dependsOn classes
//buildWithDeps.dependsOn clean
dist.dependsOn buildWithDeps
dist.dependsOn tidy

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}