apply plugin: "java"

archivesBaseName = 'Omterra'
version = '0.1.2'

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = []
sourceSets.main.kotlin.srcDirs = ["src/"]

project.ext.mainClassName = "com.jupiter.europa.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath += sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    jvmArgs = ['-Xms128m', '-Xmx1024m']
//    jvmArgs = ['-Xms128m', '-Xmx1024m', '-noverify']
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    jvmArgs = ['-Xms128m', '-Xmx1024m']
    debug = true
}

task buildWithDeps(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    //from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task tidy(type: Delete) {
    delete "./build/libs/data" 
}

task dist(type: Copy) {
    from(new File("../core/data"))
    into(new File("./build/libs/data"))
}

task buildAtlas(dependsOn: classes, type: JavaExec) {
    main = "com.omterra.tools.AtlasPacker"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    jvmArgs = ['-Xms128m', '-Xmx512m']
    ignoreExitValue = true
}

buildWithDeps.dependsOn classes
/*
 * The MIT License
 *
 * Copyright 2015 Nathan Templon.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

//buildWithDeps.dependsOn clean
dist.dependsOn buildWithDeps
dist.dependsOn tidy

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}